<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Note Spese - App Dipendenti</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }

        .container {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            padding: 40px;
            max-width: 500px;
            width: 100%;
            animation: slideUp 0.6s ease-out;
        }

        @keyframes slideUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .header {
            text-align: center;
            margin-bottom: 30px;
        }

        .header h1 {
            color: #2c3e50;
            font-size: 2.2rem;
            margin-bottom: 10px;
            font-weight: 700;
        }

        .header p {
            color: #7f8c8d;
            font-size: 1rem;
            opacity: 0.8;
        }

        .form-group {
            margin-bottom: 25px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            color: #2c3e50;
            font-weight: 600;
            font-size: 0.95rem;
        }

        .email-input {
            width: 100%;
            padding: 15px 20px;
            border: 2px solid #e0e6ed;
            border-radius: 12px;
            font-size: 1rem;
            transition: all 0.3s ease;
            background: #f8f9fa;
        }

        .email-input:focus {
            outline: none;
            border-color: #667eea;
            background: white;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .file-upload-area {
            border: 3px dashed #cbd5e0;
            border-radius: 12px;
            padding: 40px 20px;
            text-align: center;
            transition: all 0.3s ease;
            cursor: pointer;
            background: #f8f9fa;
            position: relative;
            overflow: hidden;
        }

        .file-upload-area:hover {
            border-color: #667eea;
            background: rgba(102, 126, 234, 0.05);
            transform: translateY(-2px);
        }

        .file-upload-area.dragover {
            border-color: #667eea;
            background: rgba(102, 126, 234, 0.1);
            transform: scale(1.02);
        }

        .file-upload-content {
            pointer-events: none;
        }

        .upload-icon {
            font-size: 3rem;
            color: #a0aec0;
            margin-bottom: 15px;
            transition: all 0.3s ease;
        }

        .file-upload-area:hover .upload-icon {
            color: #667eea;
            transform: scale(1.1);
        }

        .upload-text {
            font-size: 1.1rem;
            color: #4a5568;
            margin-bottom: 8px;
            font-weight: 600;
        }

        .upload-hint {
            color: #a0aec0;
            font-size: 0.9rem;
        }

        #file-input {
            display: none;
        }

        .file-preview {
            display: none;
            margin-top: 20px;
            padding: 20px;
            background: #e8f5e8;
            border-radius: 12px;
            border-left: 4px solid #48bb78;
            animation: fadeIn 0.3s ease;
        }

        .file-preview.pdf-file {
            background: #fff3cd;
            border-left-color: #ffc107;
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        .file-info {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .file-icon {
            font-size: 2rem;
            color: #48bb78;
        }

        .file-details h4 {
            color: #2d3748;
            margin-bottom: 5px;
            font-size: 1rem;
        }

        .file-details p {
            color: #718096;
            font-size: 0.9rem;
        }

        .remove-file {
            margin-left: auto;
            background: none;
            border: none;
            color: #e53e3e;
            cursor: pointer;
            font-size: 1.2rem;
            padding: 5px;
            border-radius: 50%;
            transition: all 0.2s ease;
        }

        .remove-file:hover {
            background: rgba(229, 62, 62, 0.1);
            transform: scale(1.1);
        }

        .image-preview {
            margin-top: 15px;
            text-align: center;
        }

        .image-preview img {
            max-width: 100%;
            max-height: 300px;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            object-fit: contain;
        }

        .pdf-icon {
            font-size: 4rem;
            color: #ffc107;
            margin: 20px 0;
        }

        .submit-btn {
            width: 100%;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 18px;
            font-size: 1.1rem;
            font-weight: 600;
            border-radius: 12px;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .submit-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(102, 126, 234, 0.3);
        }

        .submit-btn:active {
            transform: translateY(0);
        }

        .submit-btn:disabled {
            background: #a0aec0;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .loading-spinner {
            display: none;
            width: 20px;
            height: 20px;
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top: 2px solid white;
            animation: spin 1s linear infinite;
            margin-right: 10px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .status-message {
            margin-top: 20px;
            padding: 15px;
            border-radius: 8px;
            text-align: center;
            font-weight: 600;
            display: none;
            animation: slideDown 0.3s ease;
        }

        @keyframes slideDown {
            from {
                opacity: 0;
                transform: translateY(-10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .status-success {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .status-error {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        .required {
            color: #e53e3e;
        }

        /* Responsive design */
        @media (max-width: 600px) {
            .container {
                padding: 30px 20px;
                margin: 10px;
            }

            .header h1 {
                font-size: 1.8rem;
            }

            .file-upload-area {
                padding: 30px 15px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>📋 Note Spese</h1>
            <p>Carica il tuo scontrino e invia la nota spese</p>
        </div>

        <form id="expense-form">
            <div class="form-group">
                <label>Scontrino/Ricevuta <span class="required">*</span></label>
                <div class="file-upload-area" id="file-upload-area">
                    <div class="file-upload-content">
                        <div class="upload-icon">📎</div>
                        <div class="upload-text">Carica il tuo scontrino</div>
                        <div class="upload-hint">Trascina il file qui o clicca per selezionare (JPG, PNG, GIF, HEIC, PDF)</div>
                    </div>
                </div>
                <input type="file" id="file-input" accept="image/*,.pdf,.heic,.HEIC" required>
                
                <div class="file-preview" id="file-preview">
                    <div class="file-info">
                        <div class="file-icon">📄</div>
                        <div class="file-details">
                            <h4 id="file-name"></h4>
                            <p id="file-size"></p>
                        </div>
                        <button type="button" class="remove-file" id="remove-file">✕</button>
                    </div>
                    <div class="image-preview" id="image-preview"></div>
                </div>
            </div>

            <button type="submit" class="submit-btn" id="submit-btn">
                <div class="loading-spinner" id="loading-spinner"></div>
                <span id="btn-text">Invia Nota Spese</span>
            </button>
        </form>

        <div class="status-message" id="status-message"></div>
        
        <div class="debug-panel" id="debug-panel" style="display: none; margin-top: 20px; padding: 15px; background: #f8f9fa; border-radius: 8px; border-left: 4px solid #007bff;">
            <h4 style="margin-bottom: 10px; color: #495057;">🔧 Panel Debug</h4>
            <div style="margin-bottom: 10px;">
                <button type="button" id="test-connection" style="padding: 8px 15px; background: #007bff; color: white; border: none; border-radius: 5px; cursor: pointer; margin-right: 10px;">Test Connessione</button>
                <button type="button" id="test-get-method" style="padding: 8px 15px; background: #28a745; color: white; border: none; border-radius: 5px; cursor: pointer; margin-right: 10px;">Test GET</button>
                <button type="button" id="toggle-debug" style="padding: 8px 15px; background: #6c757d; color: white; border: none; border-radius: 5px; cursor: pointer;">Debug</button>
            </div>
            <div id="debug-info" style="font-family: monospace; font-size: 0.85rem; background: white; padding: 10px; border-radius: 4px; max-height: 200px; overflow-y: auto;"></div>
        </div>
    </div>

    <script>
        class ExpenseReportApp {
            constructor() {
                this.selectedFile = null;
                this.webhookUrl = 'https://n8n.mirko155.synology.me/webhook/64f73895-a13f-48dc-adf2-4889a97854e8';
                this.initializeElements();
                this.attachEventListeners();
            }

            initializeElements() {
                this.form = document.getElementById('expense-form');
                this.fileUploadArea = document.getElementById('file-upload-area');
                this.fileInput = document.getElementById('file-input');
                this.filePreview = document.getElementById('file-preview');
                this.fileName = document.getElementById('file-name');
                this.fileSize = document.getElementById('file-size');
                this.removeFileBtn = document.getElementById('remove-file');
                this.submitBtn = document.getElementById('submit-btn');
                this.loadingSpinner = document.getElementById('loading-spinner');
                this.btnText = document.getElementById('btn-text');
                this.statusMessage = document.getElementById('status-message');
                this.debugPanel = document.getElementById('debug-panel');
                this.debugInfo = document.getElementById('debug-info');
                this.testConnectionBtn = document.getElementById('test-connection');
                this.toggleDebugBtn = document.getElementById('toggle-debug');
                this.testGetBtn = document.getElementById('test-get-method');
                this.imagePreview = document.getElementById('image-preview');
            }

            attachEventListeners() {
                // File upload events
                this.fileUploadArea.addEventListener('click', () => this.fileInput.click());
                this.fileInput.addEventListener('change', (e) => this.handleFileSelect(e));
                
                // Drag and drop events
                this.fileUploadArea.addEventListener('dragover', (e) => this.handleDragOver(e));
                this.fileUploadArea.addEventListener('dragleave', (e) => this.handleDragLeave(e));
                this.fileUploadArea.addEventListener('drop', (e) => this.handleDrop(e));
                
                // Remove file
                this.removeFileBtn.addEventListener('click', () => this.removeFile());
                
                // Form submission
                this.form.addEventListener('submit', (e) => this.handleSubmit(e));
                
                // Debug panel
                this.testConnectionBtn.addEventListener('click', () => this.testConnection());
                this.testGetBtn.addEventListener('click', () => this.testGetMethod());
                this.toggleDebugBtn.addEventListener('click', () => this.toggleDebugPanel());
                
                // Show debug panel initially due to connection issues
                this.debugPanel.style.display = 'block';
            }

            handleDragOver(e) {
                e.preventDefault();
                this.fileUploadArea.classList.add('dragover');
            }

            handleDragLeave(e) {
                e.preventDefault();
                this.fileUploadArea.classList.remove('dragover');
            }

            handleDrop(e) {
                e.preventDefault();
                this.fileUploadArea.classList.remove('dragover');
                
                const files = e.dataTransfer.files;
                if (files.length > 0) {
                    this.processFile(files[0]);
                }
            }

            handleFileSelect(e) {
                const file = e.target.files[0];
                if (file) {
                    this.processFile(file);
                }
            }

            processFile(file) {
                // Validate file type
                const validTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/heic', 'application/pdf'];
                const fileName = file.name.toLowerCase();
                const isHeic = fileName.endsWith('.heic') || fileName.endsWith('.HEIC');
                
                if (!validTypes.includes(file.type) && !isHeic) {
                    this.showStatus('Formato file non supportato. Usa immagini (JPG, PNG, GIF, HEIC) o PDF.', 'error');
                    return;
                }

                // Validate file size (max 10MB)
                if (file.size > 10 * 1024 * 1024) {
                    this.showStatus('File troppo grande. Dimensione massima: 10MB.', 'error');
                    return;
                }

                this.selectedFile = file;
                this.showFilePreview(file);
            }

            showFilePreview(file) {
                this.fileName.textContent = file.name;
                this.fileSize.textContent = this.formatFileSize(file.size);
                
                // Reset preview area
                this.imagePreview.innerHTML = '';
                this.filePreview.classList.remove('pdf-file');
                
                // Determine file type and show appropriate preview
                if (file.type.startsWith('image/') || file.name.toLowerCase().endsWith('.heic')) {
                    this.showImagePreview(file);
                } else if (file.type === 'application/pdf') {
                    this.showPdfPreview();
                } else {
                    this.showGenericPreview();
                }
                
                this.filePreview.style.display = 'block';
                this.hideStatus();
            }

            showImagePreview(file) {
                const reader = new FileReader();
                reader.onload = (e) => {
                    const img = document.createElement('img');
                    img.src = e.target.result;
                    img.alt = 'Anteprima scontrino';
                    
                    const container = document.createElement('div');
                    container.innerHTML = `
                        <p style="margin-bottom: 10px; color: #666; font-size: 0.9rem;">📷 Anteprima immagine:</p>
                    `;
                    container.appendChild(img);
                    
                    this.imagePreview.appendChild(container);
                };
                reader.readAsDataURL(file);
            }

            showPdfPreview() {
                this.filePreview.classList.add('pdf-file');
                this.imagePreview.innerHTML = `
                    <div class="pdf-icon">📄</div>
                    <p style="color: #856404; font-weight: 600;">File PDF caricato</p>
                    <p style="color: #856404; font-size: 0.9rem;">L'anteprima non è disponibile per i file PDF</p>
                `;
            }

            showGenericPreview() {
                this.imagePreview.innerHTML = `
                    <div style="font-size: 3rem; color: #6c757d; margin: 20px 0;">📎</div>
                    <p style="color: #6c757d;">File caricato correttamente</p>
                `;
            }

            removeFile() {
                this.selectedFile = null;
                this.fileInput.value = '';
                this.filePreview.style.display = 'none';
                this.imagePreview.innerHTML = '';
                this.filePreview.classList.remove('pdf-file');
            }

            formatFileSize(bytes) {
                if (bytes === 0) return '0 Bytes';
                const k = 1024;
                const sizes = ['Bytes', 'KB', 'MB', 'GB'];
                const i = Math.floor(Math.log(bytes) / Math.log(k));
                return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
            }

            async handleSubmit(e) {
                e.preventDefault();
                
                if (!this.selectedFile) {
                    this.showStatus('Seleziona un file da caricare.', 'error');
                    return;
                }

                await this.submitExpenseReport(this.selectedFile);
            }

            async submitExpenseReport(file) {
                this.setLoadingState(true);
                this.logDebug('📤 Invio nota spese...');

                try {
                    const formData = new FormData();
                    formData.append('receipt', file);

                    this.logDebug(`📋 Dati: file=${file.name} (${this.formatFileSize(file.size)})`);

                    // Prima prova: richiesta normale con CORS
                    try {
                        const response = await fetch(this.webhookUrl, {
                            method: 'POST',
                            body: formData,
                            mode: 'cors'
                        });
                        
                        this.logDebug(`📡 Risposta CORS: status ${response.status}`);
                        
                        if (response.ok) {
                            const responseText = await response.text().catch(() => 'Nessuna risposta');
                            this.logDebug(`✅ Successo CORS: ${responseText}`);
                            this.showStatus('Nota spese inviata con successo! 🎉', 'success');
                            this.resetForm();
                            return;
                        } else {
                            const errorText = await response.text().catch(() => 'Nessun dettaglio errore');
                            this.logDebug(`❌ Errore CORS: ${response.status} - ${errorText}`);
                            
                            // Se è 404 (webhook non configurato per POST), non provare no-cors
                            if (response.status === 404) {
                                this.showStatus('❌ Webhook non configurato per POST. Configura n8n per accettare richieste POST.', 'error');
                                return;
                            }
                            
                            this.showStatus(`Errore del server (${response.status}): ${response.statusText}`, 'error');
                            return;
                        }
                        
                    } catch (corsError) {
                        this.logDebug(`⚠️ CORS fallito: ${corsError.message}`);
                        
                        // Solo se è un errore di rete/CORS, prova no-cors
                        if (corsError.message.includes('Failed to fetch') || corsError.message.includes('CORS')) {
                            this.logDebug('🔄 Tentativo con modalità no-cors...');
                            
                            const noCorsFetch = fetch(this.webhookUrl, {
                                method: 'POST',
                                body: formData,
                                mode: 'no-cors'
                            });
                            
                            // Timeout per no-cors (se impiega troppo, probabilmente ha fallito)
                            const timeout = new Promise((_, reject) => 
                                setTimeout(() => reject(new Error('Timeout')), 10000)
                            );
                            
                            try {
                                const noCorsResponse = await Promise.race([noCorsFetch, timeout]);
                                this.logDebug(`📡 Risposta no-cors: status ${noCorsResponse.status} (type: ${noCorsResponse.type})`);
                                
                                // Con no-cors, se la richiesta non fallisce, assumiamo successo
                                this.showStatus('✅ Nota spese inviata! (Verifica nei log di n8n)', 'success');
                                this.logDebug('💡 Controlla i log del workflow n8n per confermare la ricezione');
                                this.resetForm();
                                return;
                                
                            } catch (noCorsError) {
                                this.logDebug(`❌ Anche no-cors è fallito: ${noCorsError.message}`);
                                this.showStatus('❌ Invio fallito. Controlla la configurazione del webhook n8n.', 'error');
                                return;
                            }
                        } else {
                            throw corsError;
                        }
                    }
                    
                } catch (error) {
                    this.logDebug(`💥 Errore generale: ${error.message}`);
                    console.error('Errore completo:', error);
                    
                    if (error.name === 'TypeError' && error.message.includes('fetch')) {
                        this.showStatus('❌ Errore di rete: Server non raggiungibile.', 'error');
                    } else if (error.name === 'AbortError') {
                        this.showStatus('❌ Richiesta interrotta: Timeout della connessione.', 'error');
                    } else {
                        this.showStatus(`❌ Errore: ${error.message}`, 'error');
                    }
                } finally {
                    this.setLoadingState(false);
                }
            }

            setLoadingState(loading) {
                this.submitBtn.disabled = loading;
                this.loadingSpinner.style.display = loading ? 'inline-block' : 'none';
                this.btnText.textContent = loading ? 'Invio in corso...' : 'Invia Nota Spese';
            }

            showStatus(message, type) {
                this.statusMessage.textContent = message;
                this.statusMessage.className = `status-message status-${type}`;
                this.statusMessage.style.display = 'block';
                
                if (type === 'success') {
                    setTimeout(() => this.hideStatus(), 5000);
                }
            }

            hideStatus() {
                this.statusMessage.style.display = 'none';
            }

            resetForm() {
                this.form.reset();
                this.removeFile();
                setTimeout(() => this.hideStatus(), 3000);
            }

            // Debug methods
            async testConnection() {
                this.logDebug('🔄 Test connessione in corso...');
                
                try {
                    // Test 1: OPTIONS per verificare CORS
                    this.logDebug('🔍 Test CORS preflight...');
                    
                    try {
                        const optionsResponse = await fetch(this.webhookUrl, {
                            method: 'OPTIONS',
                            headers: {
                                'Origin': window.location.origin,
                                'Access-Control-Request-Method': 'POST',
                                'Access-Control-Request-Headers': 'Content-Type'
                            }
                        });
                        this.logDebug(`✅ CORS preflight OK (status: ${optionsResponse.status})`);
                        
                        // Controlla headers CORS
                        const allowOrigin = optionsResponse.headers.get('Access-Control-Allow-Origin');
                        const allowMethods = optionsResponse.headers.get('Access-Control-Allow-Methods');
                        this.logDebug(`🔧 CORS Allow-Origin: ${allowOrigin || 'Non presente'}`);
                        this.logDebug(`🔧 CORS Allow-Methods: ${allowMethods || 'Non presente'}`);
                        
                    } catch (corsError) {
                        this.logDebug(`⚠️ CORS preflight fallito: ${corsError.message}`);
                    }
                    
                    // Test 2: GET per verificare raggiungibilità
                    this.logDebug('🔍 Test GET endpoint...');
                    
                    const getResponse = await fetch(this.webhookUrl, {
                        method: 'GET',
                        mode: 'cors'
                    });
                    this.logDebug(`✅ GET response: status ${getResponse.status}`);
                    
                    // Test 3: POST di prova con no-cors
                    this.logDebug('🔍 Test POST no-cors...');
                    
                    const testFormData = new FormData();
                    testFormData.append('test', 'connection');
                    
                    const postResponse = await fetch(this.webhookUrl, {
                        method: 'POST',
                        body: testFormData,
                        mode: 'no-cors'
                    });
                    
                    this.logDebug(`✅ POST no-cors: status ${postResponse.status} (type: ${postResponse.type})`);
                    
                    // Consigli basati sui risultati
                    this.logDebug('💡 Suggerimenti:');
                    this.logDebug('- Il server è raggiungibile ✓');
                    this.logDebug('- Usa modalità no-cors se CORS non è configurato');
                    this.logDebug('- Verifica i log di n8n per confermare ricezione dati');
                    
                } catch (error) {
                    this.logDebug(`❌ Test connessione fallito: ${error.message}`);
                    this.logDebug('🔍 Possibili cause:');
                    this.logDebug('- Server n8n offline');
                    this.logDebug('- URL webhook non corretto');
                    this.logDebug('- Firewall che blocca la connessione');
                    this.logDebug(`💡 Test manuale: ${this.webhookUrl}`);
                }
            }

            logDebug(message) {
                const timestamp = new Date().toLocaleTimeString();
                const logEntry = `[${timestamp}] ${message}`;
                console.log(logEntry);
                
                this.debugInfo.innerHTML += logEntry + '<br>';
                this.debugInfo.scrollTop = this.debugInfo.scrollHeight;
            }

            toggleDebugPanel() {
                const isVisible = this.debugPanel.style.display !== 'none';
                this.debugPanel.style.display = isVisible ? 'none' : 'block';
            }

            async testGetMethod() {
                this.logDebug('🧪 Test metodo GET con parametri...');
                
                try {
                    const testUrl = `${this.webhookUrl}?test=true`;
                    
                    const response = await fetch(testUrl, {
                        method: 'GET',
                        mode: 'cors'
                    });
                    
                    this.logDebug(`📡 GET response: status ${response.status}`);
                    
                    if (response.ok) {
                        const responseText = await response.text();
                        this.logDebug(`✅ GET funziona! Risposta: ${responseText}`);
                        this.logDebug('💡 Il webhook accetta GET - devi configurarlo per POST in n8n');
                    } else {
                        this.logDebug(`❌ GET failed: ${response.status} ${response.statusText}`);
                    }
                    
                } catch (error) {
                    this.logDebug(`❌ Test GET fallito: ${error.message}`);
                }
            }
        }

        // Initialize the app when the page loads
        document.addEventListener('DOMContentLoaded', () => {
            new ExpenseReportApp();
        });
    </script>
</body>
</html>
